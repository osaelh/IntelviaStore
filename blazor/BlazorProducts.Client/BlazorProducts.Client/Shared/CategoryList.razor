

@if (CategoryService.Categories.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">Name</th>
                <th scope="col">Supplier</th>
                <th scope="col">Price</th>
                <th scope="col">Update</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in CategoryService.Categories)
            {
                <tr>
                    <td>
                        <img src="@category.Icon" alt="product image" style="width:100px;" />
                    </td>
                    <td class="align-middle">
                        @category.Name
                    </td>
                    <td class="align-middle">
                        @category.Url
                    </td>

                    <td class="align-middle">
                        <button type="button" class="btn btn-info" @onclick="() => RedirectToUpdate(category.Url)">Update</button>
                    </td>
                    <td class="align-middle">
                        <button type="button" class="btn btn-danger" @onclick="() => Delete(category.Url)">Delete</button>
                    </td>
                </tr>
}
        </tbody>
    </table> }
else
{
    <span>
        Loading categories
    </span>}

@code {
    @*    [Parameter]
        public List<Category> Categories { get; set; }*@
    [Parameter]
    public EventCallback<string> OnDeleted { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    public ICategoryService CategoryService { get; set; }
    [Inject]
    public IJSRuntime Js { get; set; }

    private void RedirectToUpdate(string categoryUrl)
    {
        var url = Path.Combine("/updateCategory/", categoryUrl);
        NavigationManager.NavigateTo(url);
    }

    private async Task Delete(string categoryUrl)
    {
       @* var category = CategoryService.Categories.FirstOrDefault(p => p.Id.Equals(categoryUrl));
        var confirmed = await Js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {category.Name} product?");
        if (confirmed)
        {
            await OnDeleted.InvokeAsync(categoryUrl);
        }*@
   await CategoryService.DeleteCategory(categoryUrl);
}

protected  override void OnInitialized()
{
    CategoryService.LoadCategoriesAsync();
        @*ProductService.OnChange += StateHasChanged;*@
    }
}

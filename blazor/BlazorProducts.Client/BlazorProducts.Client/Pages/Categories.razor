@page "/categories"


<div class="mb-2"><button type="button" class="btn btn-primary" @onclick="() => RedirectToCreate()">Create new category</button></div>
@if (CategoryService.Categories.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">Name</th>
                <th scope="col">Update</th>
                <th scope="col">Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in CategoryService.Categories)
            {
                <tr>
                    <td>
                        <span class="oi oi-@category.Icon" aria-hidden="true"></span> 
                    </td>
                    <td class="align-middle">
                        @category.Name
                    </td>
          

                    <td class="align-middle">
                        <button type="button" class="btn btn-info" @onclick="() => RedirectToUpdate(category.Url)">Update</button>
                    </td>
                    <td class="align-middle">
                        <button type="button" class="btn btn-danger" @onclick="() => Delete(category.Url)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table> }
else
{
    <span>
        Loading categories
    </span>}

@code {
    @*    [Parameter]
        public List<Category> Categories { get; set; }*@
[Parameter]
public EventCallback<string> OnDeleted { get; set; }
[Inject]
public NavigationManager NavigationManager { get; set; }
[Inject]
public ICategoryService CategoryService { get; set; }
[Inject]
public IJSRuntime Js { get; set; }

private void RedirectToUpdate(string categoryUrl)
{
    var url = Path.Combine("/updateCategory/", categoryUrl);
    NavigationManager.NavigateTo(url);
}

private void RedirectToCreate()
{
    NavigationManager.NavigateTo("/CreateCategory");
}

private async Task Delete(string categoryUrl)
{

    await CategoryService.DeleteCategory(categoryUrl);
    NavigationManager.NavigateTo("/categories",true);
}

protected override async Task OnInitializedAsync()
{
    await CategoryService.LoadCategoriesAsync();
        @*ProductService.OnChange += StateHasChanged;*@
    }
}
